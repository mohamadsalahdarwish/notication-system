@startuml
!theme aws-orange
participant User
participant "WebSocket Client" as WSClient
participant "Spring Boot Application" as App
participant Kafka
participant Debezium
participant "Database" as DB
participant Redis
participant "RabbitMQ Queue" as RabbitMQQueue
participant "RabbitMQ Broker" as RabbitMQBroker

User -> WSClient: User logs in
WSClient -> App: Establish WebSocket connection
App -> Redis: Save user session in Redis
Redis --> App: Session saved

App -> RabbitMQBroker: Subscribe to WebSocket topic

alt User has unread notifications in DB
    User -> WSClient: Request unread notifications
    WSClient -> App: Send request for unread notifications
    App -> DB: Retrieve unread notifications
    DB --> App: Return stored notifications
    App -> User: Send unread notifications to user
end

Debezium -> DB: Capture change from notification table
Debezium -> Kafka: Send change event (notification data)

Kafka -> App: Kafka consumer receives notification event

App -> Redis: Check if user is logged in
Redis --> App: Return user session status

alt User is logged in
    App -> RabbitMQQueue: Send notification to RabbitMQ exchange
    RabbitMQQueue -> RabbitMQBroker: Send notification via WebSocket (STOMP)
    RabbitMQBroker -> WSClient: Deliver real-time notification to user
else User is not logged in
    App -> DB: Save notification to database
end

User -> WSClient: User logs out
WSClient -> App: Close WebSocket connection
App -> Redis: Remove user session from Redis
Redis --> App: Session removed
@enduml
