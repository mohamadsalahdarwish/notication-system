@startuml
!theme aws-orange
participant User
participant WebSocketClient as WSClient
participant SpringBootApp as App
participant Kafka
participant Debezium
participant Database as DB
participant Redis
participant RabbitMQ

User -> WSClient: User logs in
WSClient -> App: Establish WebSocket connection
App -> Redis: Save user session in Redis
Redis --> App: Session saved

App -> RabbitMQ: Subscribe to WebSocket topic

alt User has unread notifications in DB
    User -> WSClient: Request unread notifications
    WSClient -> App: Send request for unread notifications
    App -> DB: Retrieve unread notifications
    DB --> App: Return stored notifications
    App -> User: Send unread notifications to user
end

Debezium -> DB: Capture change from notification table
Debezium -> Kafka: Send change event (notification data)

Kafka -> App: Kafka consumer receives notification event

App -> Redis: Check if user is logged in
Redis --> App: Return user session status

alt User is logged in
    App -> RabbitMQ: Send notification via WebSocket (STOMP)
    RabbitMQ -> WSClient: Deliver real-time notification to user
else User is not logged in
    App -> DB: Save notification to database
end

User -> WSClient: User logs out
WSClient -> App: Close WebSocket connection
App -> Redis: Remove user session from Redis
Redis --> App: Session removed
@enduml