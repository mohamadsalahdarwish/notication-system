version: "3.8"

networks:
  kafka_network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.0
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - kafka_network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.1.0
    container_name: kafka
    restart: unless-stopped
    networks:
      - kafka_network
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.1.0
    container_name: kafka-connect
    restart: unless-stopped
    networks:
      - kafka_network
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group-id
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connectors
    volumes:
      - ./data/kafka-connect-data/connectors:/data/connectors/
    depends_on:
      - kafka

  postgres:
    image: postgres:14
    container_name: postgres
    restart: unless-stopped
    networks:
      - kafka_network
    ports:
      - "5432:5432"
    volumes:
      - "./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf"
      - "./postgresql/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notificationdb

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - kafka_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"   # Management UI port
      - "61613:61613"   # STOMP protocol port
    volumes:
      - ./rabbit/rabbitmq-init:/etc/rabbitmq/definitions
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFINITIONS_FILE: /etc/rabbitmq/definitions/rabbitmq_definitions.json
    command: >
      sh -c "rabbitmq-plugins enable rabbitmq_stomp &&
             rabbitmq-server"
    networks:
      - kafka_network

volumes:
  postgres-data:
  redis-data:
  rabbitmq:
