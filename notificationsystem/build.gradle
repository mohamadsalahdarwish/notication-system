plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // Or 'jjwt-gson' if you prefer Gson

	runtimeOnly 'org.postgresql:postgresql'

	implementation('org.springframework.boot:spring-boot-starter-webflux') {
		exclude group: 'io.projectreactor.netty', module: 'reactor-netty'
	}
	implementation 'io.projectreactor.netty:reactor-netty-core:1.0.22'  // Adjust the version as needed

	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0' // Ensure you are using the latest stable version


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Ensure that the JAR is executable
tasks.named('jar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files
	manifest {
		attributes(
				'Main-Class': 'com.example.notificationsystem.Application' // Replace with your main class
		)
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}
